@c ****************************************************************************
@c Introduction
@c ****************************************************************************
@node Introduction
@chapter Introduction
@cindex Introduction to Antares
@anchor{#introduction}

@menu
* Getting Started::
* Required Tools::
* Features & Limitations::
* Legal information::
@end menu

The Antares is a synthesizable 32-bits soft processor core written in Verilog. It is compatible with the MIPS32 Release 1 processors and can execute code generated by a MIPS32 toolchain, with some restrictions.

The core comes includes a hardware multiplier and divider, and a vendor-independent BRAM module for simulation and synthesis.

@c --------------------------------------------
@node Getting Started
@section Getting Started
@cindex source files, downloading

This section discuss how to get the project files, and the documentation of the processor.

@c ---------------------------
@subsection Supported Host Platforms
@cindex supported host platforms

The majority of Antares's development occurs with tools that runs under the GNU/Linux operating system. All of the tools required to run the basic implementation are free, open source, and easily installable in any modern GNU/Linux distribution.

Support for the project under Cygwin on Microsoft Windows platforms cannot be assumed.

@c ---------------------------
@subsection Obtaining the project source files

The complete project can be downloaded from the GitHub repository: @url{https://github.com/AngelTerrones/Antares/archive/master.zip}.

Or just clone the repository:
@example
@kbd{git clone https://github.com/AngelTerrones/Antares.git}
@end example

@c ---------------------------
@subsection Documentation

Being compatible with the MIPS32 Release 1 processor, the official documentation is applicable: @url{http://www.imgtec.com/mips/architectures/mips32.asp}. Note that the official documentation has been updated to include the new Release 6.

The Antares documentation (this file) can be find inside the folder @code{Documentation}.

@c ---------------------------
@node Required Tools
@section Required Tools

The required tools can be divided into four groups:

@itemize @bullet
@item Host system tools: things like gcc, make, texinfo (for documentation), and others.
@item Target system toolchain and software: the MIPS toolchain, with gcc cross-compiler, support libraries, the GNU debugger (gdb), MIPS port of various OSes and RTOS, etc.
@item Electronic design automation (EDA) tools: preprocessors, simulators, FPGA tool suites, etc.
@item Debug tools: tools providing control over the system on target
@end itemize

The first two items are likely to be the same for most of the designs using the Antares core. However, the final two can vary greatly depending on the FPGA vendor, part configuration and the application of the SoC.

@c ---------------------------
@subsection Reference Design
The reference design is the minimal implementation required to test the Antares core: processor and memory.

To design, simulate, verify, compile and debug the reference design, the following tools are required:

@c ---------------------------
@subsubsection Host System Tools
Standard suit of development tools: gcc, make.

@c ---------------------------
@subsubsection Target System Tools
Suggested: @url{https://sourcery.mentor.com/GNUToolchain/subscription3537?lite=MIPS, Mentor Graphics Sourcery CodeBench Lite for MIPS ELF}.
Or build your own toolchain (@xref{Toolchain Instructions}).

@c ---------------------------
@subsubsection EDA Tools
For RTL Simulation: @url{http://iverilog.icarus.com/, Icarus Verilog}.

@c ---------------------------
@subsubsection Debug Tools
None. The target is pure simulation.

@c --------------------------------------------
@node Features & Limitations
@section Features & Limitations

The following lists the main features of Antares IP core:
@itemize @bullet
@item Core:
    @itemize @bullet
        @item Single-issue in-order 6-stage pipeline with full forwarding and hazard detection.
        @item Harvard architecture, with separate instruction and data ports.
        @item A subset of the MIPS32 instruction set. Includes: hardware multiplication, hardware division, MAC/MAS, load linked & store conditional.
        @item Multi-cycle Hardware divider (Disabled by default).
        @item Hardware multiplier (5-stages pipeline, disabled by default).
        @item Hardware is Little-Endian.
        @item Coprocessor 0 allows ISA-compliant interrupts, exceptions, and user/kernel modes.
        @item Documentation in-source.
        @item Vendor-independent code.
    @end itemize
@end itemize

The following lists the main limitations of Antares IP core:
@itemize @bullet
@item Core:
    @itemize @bullet
        @item No MMU.
        @item No Cache.
        @item No FPU. Only software-base floating point support (toolchain). Untested.
        @item No support for reverse-endian mode.
        @item No address space verification for the instruction port: Instruction address is always a kernel address.
    @end itemize
@end itemize

@c --------------------------------------------
@node Legal information
@section Legal information

@emph{MIPS32 is a trademark of Imagination Technologies. This project is not affiliated in any way with Imagination Technologies. All other product names are trademarks or registered trademarks of their respective owners}.
